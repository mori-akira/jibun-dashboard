/* tslint:disable */
/* eslint-disable */
/**
 * 自分ダッシュボードAPI定義
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * エラー詳細
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * エラーコード
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorCode': string;
    /**
     * エラーレベル
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorLevel': ErrorDetailErrorLevelEnum;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorMessage': string;
    /**
     * エラーアイテム
     * @type {Array<string>}
     * @memberof ErrorDetail
     */
    'errorItem'?: Array<string>;
}

export const ErrorDetailErrorLevelEnum = {
    Debug: 'DEBUG',
    Info: 'INFO',
    Warn: 'WARN',
    Error: 'ERROR',
    Critical: 'CRITICAL'
} as const;

export type ErrorDetailErrorLevelEnum = typeof ErrorDetailErrorLevelEnum[keyof typeof ErrorDetailErrorLevelEnum];

/**
 * エラー情報
 * @export
 * @interface ErrorInfo
 */
export interface ErrorInfo {
    /**
     * 
     * @type {Array<ErrorDetail>}
     * @memberof ErrorInfo
     */
    'errors'?: Array<ErrorDetail>;
}
/**
 * 給与概要
 * @export
 * @interface Overview
 */
export interface Overview {
    /**
     * 額面
     * @type {number}
     * @memberof Overview
     */
    'grossIncome': number;
    /**
     * 手取り
     * @type {number}
     * @memberof Overview
     */
    'netIncome': number;
    /**
     * 稼働時間
     * @type {number}
     * @memberof Overview
     */
    'operatingTime': number;
    /**
     * 残業時間
     * @type {number}
     * @memberof Overview
     */
    'overtime': number;
    /**
     * ボーナス
     * @type {number}
     * @memberof Overview
     */
    'bonus': number;
    /**
     * ボーナス(手取り)
     * @type {number}
     * @memberof Overview
     */
    'bonusTakeHome': number;
}
/**
 * パスワード情報
 * @export
 * @interface Password
 */
export interface Password {
    /**
     * 旧パスワード
     * @type {string}
     * @memberof Password
     */
    'oldPassword': string;
    /**
     * 新パスワード
     * @type {string}
     * @memberof Password
     */
    'newPassword': string;
}
/**
 * 給与明細情報
 * @export
 * @interface PayslipData
 */
export interface PayslipData {
    /**
     * 明細カテゴリキー
     * @type {string}
     * @memberof PayslipData
     */
    'key': string;
    /**
     * 明細カテゴリ
     * @type {Array<PayslipDataDataInner>}
     * @memberof PayslipData
     */
    'data': Array<PayslipDataDataInner>;
}
/**
 * 
 * @export
 * @interface PayslipDataDataInner
 */
export interface PayslipDataDataInner {
    /**
     * 明細キー
     * @type {string}
     * @memberof PayslipDataDataInner
     */
    'key': string;
    /**
     * 明細情報
     * @type {number}
     * @memberof PayslipDataDataInner
     */
    'data': number;
}
/**
 * 給与情報
 * @export
 * @interface Salary
 */
export interface Salary {
    /**
     * 給与ID
     * @type {string}
     * @memberof Salary
     */
    'salaryId'?: string;
    /**
     * ユーザID
     * @type {string}
     * @memberof Salary
     */
    'userId': string;
    /**
     * 対象年月日
     * @type {string}
     * @memberof Salary
     */
    'targetDate': string;
    /**
     * 
     * @type {Overview}
     * @memberof Salary
     */
    'overview': Overview;
    /**
     * 
     * @type {Structure}
     * @memberof Salary
     */
    'structure': Structure;
    /**
     * 
     * @type {Array<PayslipData>}
     * @memberof Salary
     */
    'payslipData': Array<PayslipData>;
}
/**
 * 給与ID
 * @export
 * @interface SalaryId
 */
export interface SalaryId {
    /**
     * 給与ID
     * @type {string}
     * @memberof SalaryId
     */
    'salaryId'?: string;
}
/**
 * 給与構成
 * @export
 * @interface Structure
 */
export interface Structure {
    /**
     * 基本給
     * @type {number}
     * @memberof Structure
     */
    'basicSalary': number;
    /**
     * 残業代
     * @type {number}
     * @memberof Structure
     */
    'overtimePay': number;
    /**
     * 家賃手当
     * @type {number}
     * @memberof Structure
     */
    'housingAllowance': number;
    /**
     * 役職手当
     * @type {number}
     * @memberof Structure
     */
    'positionAllowance': number;
    /**
     * その他
     * @type {number}
     * @memberof Structure
     */
    'other': number;
}
/**
 * ユーザ情報
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザID
     * @type {string}
     * @memberof User
     */
    'userId'?: string;
    /**
     * ユーザ名
     * @type {string}
     * @memberof User
     */
    'userName': string;
    /**
     * eメールアドレス
     * @type {string}
     * @memberof User
     */
    'emailAddress': string;
}

/**
 * SalaryApi - axios parameter creator
 * @export
 */
export const SalaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * IDを指定して給与情報を削除する
         * @summary 給与情報削除(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalary: async (salaryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salaryId' is not null or undefined
            assertParamExists('deleteSalary', 'salaryId', salaryId)
            const localVarPath = `/salary/{salaryId}`
                .replace(`{${"salaryId"}}`, encodeURIComponent(String(salaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 単一の対象日付、または対象日付From~対象日付Toを指定して給与情報を取得する
         * @summary 給与情報取得
         * @param {string} [targetDate] 対象年月日
         * @param {string} [targetDateFrom] 対象年月日From
         * @param {string} [targetDateTo] 対象年月日To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalary: async (targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (targetDate !== undefined) {
                localVarQueryParameter['targetDate'] = (targetDate as any instanceof Date) ?
                    (targetDate as any).toISOString().substring(0,10) :
                    targetDate;
            }

            if (targetDateFrom !== undefined) {
                localVarQueryParameter['targetDateFrom'] = (targetDateFrom as any instanceof Date) ?
                    (targetDateFrom as any).toISOString().substring(0,10) :
                    targetDateFrom;
            }

            if (targetDateTo !== undefined) {
                localVarQueryParameter['targetDateTo'] = (targetDateTo as any instanceof Date) ?
                    (targetDateTo as any).toISOString().substring(0,10) :
                    targetDateTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを指定して給与情報を取得する
         * @summary 給与情報取得(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryById: async (salaryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salaryId' is not null or undefined
            assertParamExists('getSalaryById', 'salaryId', salaryId)
            const localVarPath = `/salary/{salaryId}`
                .replace(`{${"salaryId"}}`, encodeURIComponent(String(salaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与情報を登録(登録済みの場合は情報を置き換え)する
         * @summary 給与情報登録
         * @param {Salary} [salary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSalary: async (salary?: Salary, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salary, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalaryApi - functional programming interface
 * @export
 */
export const SalaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalaryApiAxiosParamCreator(configuration)
    return {
        /**
         * IDを指定して給与情報を削除する
         * @summary 給与情報削除(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalary(salaryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalary(salaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.deleteSalary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 単一の対象日付、または対象日付From~対象日付Toを指定して給与情報を取得する
         * @summary 給与情報取得
         * @param {string} [targetDate] 対象年月日
         * @param {string} [targetDateFrom] 対象年月日From
         * @param {string} [targetDateTo] 対象年月日To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Salary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalary(targetDate, targetDateFrom, targetDateTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.getSalary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * IDを指定して給与情報を取得する
         * @summary 給与情報取得(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalaryById(salaryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalaryId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalaryById(salaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.getSalaryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 給与情報を登録(登録済みの場合は情報を置き換え)する
         * @summary 給与情報登録
         * @param {Salary} [salary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSalary(salary?: Salary, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalaryId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSalary(salary, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.putSalary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalaryApi - factory interface
 * @export
 */
export const SalaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalaryApiFp(configuration)
    return {
        /**
         * IDを指定して給与情報を削除する
         * @summary 給与情報削除(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalary(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalary(salaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 単一の対象日付、または対象日付From~対象日付Toを指定して給与情報を取得する
         * @summary 給与情報取得
         * @param {string} [targetDate] 対象年月日
         * @param {string} [targetDateFrom] 対象年月日From
         * @param {string} [targetDateTo] 対象年月日To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Salary>> {
            return localVarFp.getSalary(targetDate, targetDateFrom, targetDateTo, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを指定して給与情報を取得する
         * @summary 給与情報取得(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryById(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId> {
            return localVarFp.getSalaryById(salaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与情報を登録(登録済みの場合は情報を置き換え)する
         * @summary 給与情報登録
         * @param {Salary} [salary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSalary(salary?: Salary, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId> {
            return localVarFp.putSalary(salary, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalaryApi - interface
 * @export
 * @interface SalaryApi
 */
export interface SalaryApiInterface {
    /**
     * IDを指定して給与情報を削除する
     * @summary 給与情報削除(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    deleteSalary(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 単一の対象日付、または対象日付From~対象日付Toを指定して給与情報を取得する
     * @summary 給与情報取得
     * @param {string} [targetDate] 対象年月日
     * @param {string} [targetDateFrom] 対象年月日From
     * @param {string} [targetDateTo] 対象年月日To
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Salary>>;

    /**
     * IDを指定して給与情報を取得する
     * @summary 給与情報取得(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    getSalaryById(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId>;

    /**
     * 給与情報を登録(登録済みの場合は情報を置き換え)する
     * @summary 給与情報登録
     * @param {Salary} [salary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    putSalary(salary?: Salary, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId>;

}

/**
 * SalaryApi - object-oriented interface
 * @export
 * @class SalaryApi
 * @extends {BaseAPI}
 */
export class SalaryApi extends BaseAPI implements SalaryApiInterface {
    /**
     * IDを指定して給与情報を削除する
     * @summary 給与情報削除(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public deleteSalary(salaryId: string, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).deleteSalary(salaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 単一の対象日付、または対象日付From~対象日付Toを指定して給与情報を取得する
     * @summary 給与情報取得
     * @param {string} [targetDate] 対象年月日
     * @param {string} [targetDateFrom] 対象年月日From
     * @param {string} [targetDateTo] 対象年月日To
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).getSalary(targetDate, targetDateFrom, targetDateTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを指定して給与情報を取得する
     * @summary 給与情報取得(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public getSalaryById(salaryId: string, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).getSalaryById(salaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与情報を登録(登録済みの場合は情報を置き換え)する
     * @summary 給与情報登録
     * @param {Salary} [salary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public putSalary(salary?: Salary, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).putSalary(salary, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
         * @summary ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パスワード情報を更新する
         * @summary パスワード更新
         * @param {Password} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPassword: async (password?: Password, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(password, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
         * @summary ユーザ情報登録
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUser: async (user?: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
         * @summary ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * パスワード情報を更新する
         * @summary パスワード更新
         * @param {Password} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPassword(password?: Password, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPassword(password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.postPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
         * @summary ユーザ情報登録
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUser(user?: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUser(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.putUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
         * @summary ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * パスワード情報を更新する
         * @summary パスワード更新
         * @param {Password} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPassword(password?: Password, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postPassword(password, options).then((request) => request(axios, basePath));
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
         * @summary ユーザ情報登録
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUser(user?: User, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putUser(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
     * @summary ユーザ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUser(options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * パスワード情報を更新する
     * @summary パスワード更新
     * @param {Password} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postPassword(password?: Password, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
     * @summary ユーザ情報登録
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    putUser(user?: User, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
     * @summary ユーザ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パスワード情報を更新する
     * @summary パスワード更新
     * @param {Password} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postPassword(password?: Password, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).postPassword(password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
     * @summary ユーザ情報登録
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public putUser(user?: User, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).putUser(user, options).then((request) => request(this.axios, this.basePath));
    }
}



