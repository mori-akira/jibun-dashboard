/* tslint:disable */
/* eslint-disable */
/**
 * 自分ダッシュボードAPI定義
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * エラー詳細
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * エラーコード
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorCode': string;
    /**
     * エラーレベル
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorLevel': ErrorDetailErrorLevelEnum;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorMessage': string;
    /**
     * エラーアイテム
     * @type {Array<string>}
     * @memberof ErrorDetail
     */
    'errorItem'?: Array<string>;
}

export const ErrorDetailErrorLevelEnum = {
    Debug: 'DEBUG',
    Info: 'INFO',
    Warn: 'WARN',
    Error: 'ERROR',
    Critical: 'CRITICAL'
} as const;

export type ErrorDetailErrorLevelEnum = typeof ErrorDetailErrorLevelEnum[keyof typeof ErrorDetailErrorLevelEnum];

/**
 * エラー情報
 * @export
 * @interface ErrorInfo
 */
export interface ErrorInfo {
    /**
     * 
     * @type {Array<ErrorDetail>}
     * @memberof ErrorInfo
     */
    'errors'?: Array<ErrorDetail>;
}
/**
 * 給与概要
 * @export
 * @interface Overview
 */
export interface Overview {
    /**
     * 額面
     * @type {number}
     * @memberof Overview
     */
    'grossIncome': number;
    /**
     * 手取り
     * @type {number}
     * @memberof Overview
     */
    'netIncome': number;
    /**
     * 稼働時間
     * @type {number}
     * @memberof Overview
     */
    'operatingTime': number;
    /**
     * 残業時間
     * @type {number}
     * @memberof Overview
     */
    'overtime': number;
    /**
     * ボーナス
     * @type {number}
     * @memberof Overview
     */
    'bonus': number;
    /**
     * ボーナス(手取り)
     * @type {number}
     * @memberof Overview
     */
    'bonusTakeHome': number;
}
/**
 * パスワード情報
 * @export
 * @interface Password
 */
export interface Password {
    /**
     * 旧パスワード
     * @type {string}
     * @memberof Password
     */
    'oldPassword': string;
    /**
     * 新パスワード
     * @type {string}
     * @memberof Password
     */
    'newPassword': string;
}
/**
 * 給与明細
 * @export
 * @interface PayslipData
 */
export interface PayslipData {
    /**
     * 明細カテゴリキー
     * @type {string}
     * @memberof PayslipData
     */
    'key': string;
    /**
     * 明細カテゴリ
     * @type {Array<PayslipDataDataInner>}
     * @memberof PayslipData
     */
    'data': Array<PayslipDataDataInner>;
}
/**
 * 
 * @export
 * @interface PayslipDataDataInner
 */
export interface PayslipDataDataInner {
    /**
     * 明細キー
     * @type {string}
     * @memberof PayslipDataDataInner
     */
    'key': string;
    /**
     * 明細情報
     * @type {number}
     * @memberof PayslipDataDataInner
     */
    'data': number;
}
/**
 * 資格情報
 * @export
 * @interface Qualification
 */
export interface Qualification {
    /**
     * 資格ID
     * @type {string}
     * @memberof Qualification
     */
    'qualificationId'?: string;
    /**
     * ユーザID
     * @type {string}
     * @memberof Qualification
     */
    'userId': string;
    /**
     * 資格名
     * @type {string}
     * @memberof Qualification
     */
    'qualificationName': string;
    /**
     * 略称
     * @type {string}
     * @memberof Qualification
     */
    'abbreviation'?: string;
    /**
     * バージョン
     * @type {string}
     * @memberof Qualification
     */
    'version'?: string;
    /**
     * ステータス
     * @type {string}
     * @memberof Qualification
     */
    'status': QualificationStatusEnum;
    /**
     * ランク
     * @type {string}
     * @memberof Qualification
     */
    'rank': QualificationRankEnum;
    /**
     * 発行組織
     * @type {string}
     * @memberof Qualification
     */
    'organization': string;
    /**
     * 取得年月日
     * @type {string}
     * @memberof Qualification
     */
    'acquiredDate'?: string;
    /**
     * 有効期限
     * @type {string}
     * @memberof Qualification
     */
    'expirationDate'?: string;
    /**
     * 公式URL
     * @type {string}
     * @memberof Qualification
     */
    'officialUrl': string;
    /**
     * 証明書URL
     * @type {string}
     * @memberof Qualification
     */
    'certificationUrl'?: string;
    /**
     * バッジURL
     * @type {string}
     * @memberof Qualification
     */
    'badgeUrl'?: string;
}

export const QualificationStatusEnum = {
    Dream: 'dream',
    Planning: 'planning',
    Acquired: 'acquired'
} as const;

export type QualificationStatusEnum = typeof QualificationStatusEnum[keyof typeof QualificationStatusEnum];
export const QualificationRankEnum = {
    D: 'D',
    C: 'C',
    B: 'B',
    A: 'A'
} as const;

export type QualificationRankEnum = typeof QualificationRankEnum[keyof typeof QualificationRankEnum];

/**
 * 資格ID
 * @export
 * @interface QualificationId
 */
export interface QualificationId {
    /**
     * 資格ID
     * @type {string}
     * @memberof QualificationId
     */
    'qualificationId'?: string;
}
/**
 * 給与情報
 * @export
 * @interface Salary
 */
export interface Salary {
    /**
     * 給与ID
     * @type {string}
     * @memberof Salary
     */
    'salaryId'?: string;
    /**
     * ユーザID
     * @type {string}
     * @memberof Salary
     */
    'userId': string;
    /**
     * 対象年月日
     * @type {string}
     * @memberof Salary
     */
    'targetDate': string;
    /**
     * 
     * @type {Overview}
     * @memberof Salary
     */
    'overview': Overview;
    /**
     * 
     * @type {Structure}
     * @memberof Salary
     */
    'structure': Structure;
    /**
     * 
     * @type {Array<PayslipData>}
     * @memberof Salary
     */
    'payslipData': Array<PayslipData>;
}
/**
 * 給与ID
 * @export
 * @interface SalaryId
 */
export interface SalaryId {
    /**
     * 給与ID
     * @type {string}
     * @memberof SalaryId
     */
    'salaryId'?: string;
}
/**
 * 設定情報
 * @export
 * @interface Setting
 */
export interface Setting {
    /**
     * 設定ID
     * @type {string}
     * @memberof Setting
     */
    'settingId'?: string;
    /**
     * ユーザID
     * @type {string}
     * @memberof Setting
     */
    'userId'?: string;
    /**
     * 
     * @type {SettingSalary}
     * @memberof Setting
     */
    'salary': SettingSalary;
    /**
     * 
     * @type {SettingQualification}
     * @memberof Setting
     */
    'Qualification'?: SettingQualification;
}
/**
 * 資格設定
 * @export
 * @interface SettingQualification
 */
export interface SettingQualification {
    /**
     * 
     * @type {string}
     * @memberof SettingQualification
     */
    'rankAColor': string;
    /**
     * 
     * @type {string}
     * @memberof SettingQualification
     */
    'rankBColor': string;
    /**
     * 
     * @type {string}
     * @memberof SettingQualification
     */
    'rankCColor': string;
    /**
     * 
     * @type {string}
     * @memberof SettingQualification
     */
    'rankDColor': string;
}
/**
 * 給与設定
 * @export
 * @interface SettingSalary
 */
export interface SettingSalary {
    /**
     * 
     * @type {number}
     * @memberof SettingSalary
     */
    'financialYearStartMonth': number;
    /**
     * 
     * @type {number}
     * @memberof SettingSalary
     */
    'transitionItemCount': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SettingSalary
     */
    'compareDataColors': Array<string>;
}
/**
 * 給与構成
 * @export
 * @interface Structure
 */
export interface Structure {
    /**
     * 基本給
     * @type {number}
     * @memberof Structure
     */
    'basicSalary': number;
    /**
     * 残業代
     * @type {number}
     * @memberof Structure
     */
    'overtimePay': number;
    /**
     * 家賃手当
     * @type {number}
     * @memberof Structure
     */
    'housingAllowance': number;
    /**
     * 役職手当
     * @type {number}
     * @memberof Structure
     */
    'positionAllowance': number;
    /**
     * その他
     * @type {number}
     * @memberof Structure
     */
    'other': number;
}
/**
 * ユーザ情報
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザID
     * @type {string}
     * @memberof User
     */
    'userId'?: string;
    /**
     * ユーザ名
     * @type {string}
     * @memberof User
     */
    'userName': string;
    /**
     * eメールアドレス
     * @type {string}
     * @memberof User
     */
    'emailAddress': string;
}

/**
 * QualificationApi - axios parameter creator
 * @export
 */
export const QualificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * IDを指定して資格情報を削除する
         * @summary 資格情報削除(ID)
         * @param {string} qualificationId 資格ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQualification: async (qualificationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualificationId' is not null or undefined
            assertParamExists('deleteQualification', 'qualificationId', qualificationId)
            const localVarPath = `/qualification/{qualificationId}`
                .replace(`{${"qualificationId"}}`, encodeURIComponent(String(qualificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 検索条件を指定して資格情報を取得する
         * @summary 資格情報取得
         * @param {string} [qualificationName] 資格名
         * @param {Array<GetQualificationStatusEnum>} [status] ステータス
         * @param {Array<GetQualificationRankEnum>} [rank] ランク
         * @param {string} [organization] 発行組織
         * @param {string} [acquiredDateFrom] 取得年月日From
         * @param {string} [acquiredDateTo] 取得年月日To
         * @param {string} [expirationDateFrom] 有効期限From
         * @param {string} [expirationDateTo] 有効期限To
         * @param {GetQualificationSortKeyEnum} [sortKey] ソートキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQualification: async (qualificationName?: string, status?: Array<GetQualificationStatusEnum>, rank?: Array<GetQualificationRankEnum>, organization?: string, acquiredDateFrom?: string, acquiredDateTo?: string, expirationDateFrom?: string, expirationDateTo?: string, sortKey?: GetQualificationSortKeyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (qualificationName !== undefined) {
                localVarQueryParameter['qualificationName'] = qualificationName;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (rank) {
                localVarQueryParameter['rank'] = rank;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (acquiredDateFrom !== undefined) {
                localVarQueryParameter['acquiredDateFrom'] = (acquiredDateFrom as any instanceof Date) ?
                    (acquiredDateFrom as any).toISOString().substring(0,10) :
                    acquiredDateFrom;
            }

            if (acquiredDateTo !== undefined) {
                localVarQueryParameter['acquiredDateTo'] = (acquiredDateTo as any instanceof Date) ?
                    (acquiredDateTo as any).toISOString().substring(0,10) :
                    acquiredDateTo;
            }

            if (expirationDateFrom !== undefined) {
                localVarQueryParameter['expirationDateFrom'] = (expirationDateFrom as any instanceof Date) ?
                    (expirationDateFrom as any).toISOString().substring(0,10) :
                    expirationDateFrom;
            }

            if (expirationDateTo !== undefined) {
                localVarQueryParameter['expirationDateTo'] = (expirationDateTo as any instanceof Date) ?
                    (expirationDateTo as any).toISOString().substring(0,10) :
                    expirationDateTo;
            }

            if (sortKey !== undefined) {
                localVarQueryParameter['sortKey'] = sortKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを指定して資格情報を取得する
         * @summary 資格情報取得(ID)
         * @param {string} qualificationId 資格ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQualificationById: async (qualificationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualificationId' is not null or undefined
            assertParamExists('getQualificationById', 'qualificationId', qualificationId)
            const localVarPath = `/qualification/{qualificationId}`
                .replace(`{${"qualificationId"}}`, encodeURIComponent(String(qualificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 資格報を登録(登録済みの場合は情報を置き換え)する
         * @summary 資格情報登録
         * @param {Qualification} [qualification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putQualification: async (qualification?: Qualification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qualification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QualificationApi - functional programming interface
 * @export
 */
export const QualificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QualificationApiAxiosParamCreator(configuration)
    return {
        /**
         * IDを指定して資格情報を削除する
         * @summary 資格情報削除(ID)
         * @param {string} qualificationId 資格ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQualification(qualificationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQualification(qualificationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QualificationApi.deleteQualification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 検索条件を指定して資格情報を取得する
         * @summary 資格情報取得
         * @param {string} [qualificationName] 資格名
         * @param {Array<GetQualificationStatusEnum>} [status] ステータス
         * @param {Array<GetQualificationRankEnum>} [rank] ランク
         * @param {string} [organization] 発行組織
         * @param {string} [acquiredDateFrom] 取得年月日From
         * @param {string} [acquiredDateTo] 取得年月日To
         * @param {string} [expirationDateFrom] 有効期限From
         * @param {string} [expirationDateTo] 有効期限To
         * @param {GetQualificationSortKeyEnum} [sortKey] ソートキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQualification(qualificationName?: string, status?: Array<GetQualificationStatusEnum>, rank?: Array<GetQualificationRankEnum>, organization?: string, acquiredDateFrom?: string, acquiredDateTo?: string, expirationDateFrom?: string, expirationDateTo?: string, sortKey?: GetQualificationSortKeyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Qualification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQualification(qualificationName, status, rank, organization, acquiredDateFrom, acquiredDateTo, expirationDateFrom, expirationDateTo, sortKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QualificationApi.getQualification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * IDを指定して資格情報を取得する
         * @summary 資格情報取得(ID)
         * @param {string} qualificationId 資格ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQualificationById(qualificationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQualificationById(qualificationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QualificationApi.getQualificationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 資格報を登録(登録済みの場合は情報を置き換え)する
         * @summary 資格情報登録
         * @param {Qualification} [qualification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putQualification(qualification?: Qualification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putQualification(qualification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QualificationApi.putQualification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QualificationApi - factory interface
 * @export
 */
export const QualificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QualificationApiFp(configuration)
    return {
        /**
         * IDを指定して資格情報を削除する
         * @summary 資格情報削除(ID)
         * @param {string} qualificationId 資格ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQualification(qualificationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQualification(qualificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 検索条件を指定して資格情報を取得する
         * @summary 資格情報取得
         * @param {string} [qualificationName] 資格名
         * @param {Array<GetQualificationStatusEnum>} [status] ステータス
         * @param {Array<GetQualificationRankEnum>} [rank] ランク
         * @param {string} [organization] 発行組織
         * @param {string} [acquiredDateFrom] 取得年月日From
         * @param {string} [acquiredDateTo] 取得年月日To
         * @param {string} [expirationDateFrom] 有効期限From
         * @param {string} [expirationDateTo] 有効期限To
         * @param {GetQualificationSortKeyEnum} [sortKey] ソートキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQualification(qualificationName?: string, status?: Array<GetQualificationStatusEnum>, rank?: Array<GetQualificationRankEnum>, organization?: string, acquiredDateFrom?: string, acquiredDateTo?: string, expirationDateFrom?: string, expirationDateTo?: string, sortKey?: GetQualificationSortKeyEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Qualification>> {
            return localVarFp.getQualification(qualificationName, status, rank, organization, acquiredDateFrom, acquiredDateTo, expirationDateFrom, expirationDateTo, sortKey, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを指定して資格情報を取得する
         * @summary 資格情報取得(ID)
         * @param {string} qualificationId 資格ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQualificationById(qualificationId: string, options?: RawAxiosRequestConfig): AxiosPromise<QualificationId> {
            return localVarFp.getQualificationById(qualificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 資格報を登録(登録済みの場合は情報を置き換え)する
         * @summary 資格情報登録
         * @param {Qualification} [qualification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putQualification(qualification?: Qualification, options?: RawAxiosRequestConfig): AxiosPromise<QualificationId> {
            return localVarFp.putQualification(qualification, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QualificationApi - interface
 * @export
 * @interface QualificationApi
 */
export interface QualificationApiInterface {
    /**
     * IDを指定して資格情報を削除する
     * @summary 資格情報削除(ID)
     * @param {string} qualificationId 資格ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApiInterface
     */
    deleteQualification(qualificationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 検索条件を指定して資格情報を取得する
     * @summary 資格情報取得
     * @param {string} [qualificationName] 資格名
     * @param {Array<GetQualificationStatusEnum>} [status] ステータス
     * @param {Array<GetQualificationRankEnum>} [rank] ランク
     * @param {string} [organization] 発行組織
     * @param {string} [acquiredDateFrom] 取得年月日From
     * @param {string} [acquiredDateTo] 取得年月日To
     * @param {string} [expirationDateFrom] 有効期限From
     * @param {string} [expirationDateTo] 有効期限To
     * @param {GetQualificationSortKeyEnum} [sortKey] ソートキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApiInterface
     */
    getQualification(qualificationName?: string, status?: Array<GetQualificationStatusEnum>, rank?: Array<GetQualificationRankEnum>, organization?: string, acquiredDateFrom?: string, acquiredDateTo?: string, expirationDateFrom?: string, expirationDateTo?: string, sortKey?: GetQualificationSortKeyEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Qualification>>;

    /**
     * IDを指定して資格情報を取得する
     * @summary 資格情報取得(ID)
     * @param {string} qualificationId 資格ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApiInterface
     */
    getQualificationById(qualificationId: string, options?: RawAxiosRequestConfig): AxiosPromise<QualificationId>;

    /**
     * 資格報を登録(登録済みの場合は情報を置き換え)する
     * @summary 資格情報登録
     * @param {Qualification} [qualification] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApiInterface
     */
    putQualification(qualification?: Qualification, options?: RawAxiosRequestConfig): AxiosPromise<QualificationId>;

}

/**
 * QualificationApi - object-oriented interface
 * @export
 * @class QualificationApi
 * @extends {BaseAPI}
 */
export class QualificationApi extends BaseAPI implements QualificationApiInterface {
    /**
     * IDを指定して資格情報を削除する
     * @summary 資格情報削除(ID)
     * @param {string} qualificationId 資格ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public deleteQualification(qualificationId: string, options?: RawAxiosRequestConfig) {
        return QualificationApiFp(this.configuration).deleteQualification(qualificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 検索条件を指定して資格情報を取得する
     * @summary 資格情報取得
     * @param {string} [qualificationName] 資格名
     * @param {Array<GetQualificationStatusEnum>} [status] ステータス
     * @param {Array<GetQualificationRankEnum>} [rank] ランク
     * @param {string} [organization] 発行組織
     * @param {string} [acquiredDateFrom] 取得年月日From
     * @param {string} [acquiredDateTo] 取得年月日To
     * @param {string} [expirationDateFrom] 有効期限From
     * @param {string} [expirationDateTo] 有効期限To
     * @param {GetQualificationSortKeyEnum} [sortKey] ソートキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public getQualification(qualificationName?: string, status?: Array<GetQualificationStatusEnum>, rank?: Array<GetQualificationRankEnum>, organization?: string, acquiredDateFrom?: string, acquiredDateTo?: string, expirationDateFrom?: string, expirationDateTo?: string, sortKey?: GetQualificationSortKeyEnum, options?: RawAxiosRequestConfig) {
        return QualificationApiFp(this.configuration).getQualification(qualificationName, status, rank, organization, acquiredDateFrom, acquiredDateTo, expirationDateFrom, expirationDateTo, sortKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを指定して資格情報を取得する
     * @summary 資格情報取得(ID)
     * @param {string} qualificationId 資格ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public getQualificationById(qualificationId: string, options?: RawAxiosRequestConfig) {
        return QualificationApiFp(this.configuration).getQualificationById(qualificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 資格報を登録(登録済みの場合は情報を置き換え)する
     * @summary 資格情報登録
     * @param {Qualification} [qualification] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public putQualification(qualification?: Qualification, options?: RawAxiosRequestConfig) {
        return QualificationApiFp(this.configuration).putQualification(qualification, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetQualificationStatusEnum = {
    Dream: 'dream',
    Planning: 'planning',
    Acquired: 'acquired'
} as const;
export type GetQualificationStatusEnum = typeof GetQualificationStatusEnum[keyof typeof GetQualificationStatusEnum];
/**
 * @export
 */
export const GetQualificationRankEnum = {
    D: 'D',
    C: 'C',
    B: 'B',
    A: 'A'
} as const;
export type GetQualificationRankEnum = typeof GetQualificationRankEnum[keyof typeof GetQualificationRankEnum];
/**
 * @export
 */
export const GetQualificationSortKeyEnum = {
    QualificationName: 'qualificationName',
    Rank: 'rank',
    Organization: 'organization',
    AcquiredDate: 'acquiredDate',
    ExpirationDate: 'expirationDate'
} as const;
export type GetQualificationSortKeyEnum = typeof GetQualificationSortKeyEnum[keyof typeof GetQualificationSortKeyEnum];


/**
 * SalaryApi - axios parameter creator
 * @export
 */
export const SalaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * IDを指定して給与情報を削除する
         * @summary 給与情報削除(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalary: async (salaryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salaryId' is not null or undefined
            assertParamExists('deleteSalary', 'salaryId', salaryId)
            const localVarPath = `/salary/{salaryId}`
                .replace(`{${"salaryId"}}`, encodeURIComponent(String(salaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 検索条件を指定して給与情報を取得する
         * @summary 給与情報取得
         * @param {string} [targetDate] 対象年月日
         * @param {string} [targetDateFrom] 対象年月日From
         * @param {string} [targetDateTo] 対象年月日To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalary: async (targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (targetDate !== undefined) {
                localVarQueryParameter['targetDate'] = (targetDate as any instanceof Date) ?
                    (targetDate as any).toISOString().substring(0,10) :
                    targetDate;
            }

            if (targetDateFrom !== undefined) {
                localVarQueryParameter['targetDateFrom'] = (targetDateFrom as any instanceof Date) ?
                    (targetDateFrom as any).toISOString().substring(0,10) :
                    targetDateFrom;
            }

            if (targetDateTo !== undefined) {
                localVarQueryParameter['targetDateTo'] = (targetDateTo as any instanceof Date) ?
                    (targetDateTo as any).toISOString().substring(0,10) :
                    targetDateTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを指定して給与情報を取得する
         * @summary 給与情報取得(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryById: async (salaryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salaryId' is not null or undefined
            assertParamExists('getSalaryById', 'salaryId', salaryId)
            const localVarPath = `/salary/{salaryId}`
                .replace(`{${"salaryId"}}`, encodeURIComponent(String(salaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与情報を登録(登録済みの場合は情報を置き換え)する
         * @summary 給与情報登録
         * @param {Salary} [salary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSalary: async (salary?: Salary, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salary, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalaryApi - functional programming interface
 * @export
 */
export const SalaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalaryApiAxiosParamCreator(configuration)
    return {
        /**
         * IDを指定して給与情報を削除する
         * @summary 給与情報削除(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalary(salaryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalary(salaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.deleteSalary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 検索条件を指定して給与情報を取得する
         * @summary 給与情報取得
         * @param {string} [targetDate] 対象年月日
         * @param {string} [targetDateFrom] 対象年月日From
         * @param {string} [targetDateTo] 対象年月日To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Salary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalary(targetDate, targetDateFrom, targetDateTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.getSalary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * IDを指定して給与情報を取得する
         * @summary 給与情報取得(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalaryById(salaryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalaryId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalaryById(salaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.getSalaryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 給与情報を登録(登録済みの場合は情報を置き換え)する
         * @summary 給与情報登録
         * @param {Salary} [salary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSalary(salary?: Salary, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalaryId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSalary(salary, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryApi.putSalary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalaryApi - factory interface
 * @export
 */
export const SalaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalaryApiFp(configuration)
    return {
        /**
         * IDを指定して給与情報を削除する
         * @summary 給与情報削除(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalary(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalary(salaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 検索条件を指定して給与情報を取得する
         * @summary 給与情報取得
         * @param {string} [targetDate] 対象年月日
         * @param {string} [targetDateFrom] 対象年月日From
         * @param {string} [targetDateTo] 対象年月日To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Salary>> {
            return localVarFp.getSalary(targetDate, targetDateFrom, targetDateTo, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを指定して給与情報を取得する
         * @summary 給与情報取得(ID)
         * @param {string} salaryId 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryById(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId> {
            return localVarFp.getSalaryById(salaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与情報を登録(登録済みの場合は情報を置き換え)する
         * @summary 給与情報登録
         * @param {Salary} [salary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSalary(salary?: Salary, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId> {
            return localVarFp.putSalary(salary, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalaryApi - interface
 * @export
 * @interface SalaryApi
 */
export interface SalaryApiInterface {
    /**
     * IDを指定して給与情報を削除する
     * @summary 給与情報削除(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    deleteSalary(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 検索条件を指定して給与情報を取得する
     * @summary 給与情報取得
     * @param {string} [targetDate] 対象年月日
     * @param {string} [targetDateFrom] 対象年月日From
     * @param {string} [targetDateTo] 対象年月日To
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Salary>>;

    /**
     * IDを指定して給与情報を取得する
     * @summary 給与情報取得(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    getSalaryById(salaryId: string, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId>;

    /**
     * 給与情報を登録(登録済みの場合は情報を置き換え)する
     * @summary 給与情報登録
     * @param {Salary} [salary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApiInterface
     */
    putSalary(salary?: Salary, options?: RawAxiosRequestConfig): AxiosPromise<SalaryId>;

}

/**
 * SalaryApi - object-oriented interface
 * @export
 * @class SalaryApi
 * @extends {BaseAPI}
 */
export class SalaryApi extends BaseAPI implements SalaryApiInterface {
    /**
     * IDを指定して給与情報を削除する
     * @summary 給与情報削除(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public deleteSalary(salaryId: string, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).deleteSalary(salaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 検索条件を指定して給与情報を取得する
     * @summary 給与情報取得
     * @param {string} [targetDate] 対象年月日
     * @param {string} [targetDateFrom] 対象年月日From
     * @param {string} [targetDateTo] 対象年月日To
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public getSalary(targetDate?: string, targetDateFrom?: string, targetDateTo?: string, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).getSalary(targetDate, targetDateFrom, targetDateTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを指定して給与情報を取得する
     * @summary 給与情報取得(ID)
     * @param {string} salaryId 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public getSalaryById(salaryId: string, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).getSalaryById(salaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与情報を登録(登録済みの場合は情報を置き換え)する
     * @summary 給与情報登録
     * @param {Salary} [salary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryApi
     */
    public putSalary(salary?: Salary, options?: RawAxiosRequestConfig) {
        return SalaryApiFp(this.configuration).putSalary(salary, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingApi - axios parameter creator
 * @export
 */
export const SettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザの設定を取得する
         * @summary 設定情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザの設定を登録(登録済みの場合は情報を置き換え)する
         * @summary 設定情報登録
         * @param {Setting} [setting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSetting: async (setting?: Setting, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setting, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingApi - functional programming interface
 * @export
 */
export const SettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingApiAxiosParamCreator(configuration)
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザの設定を取得する
         * @summary 設定情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSetting(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Setting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSetting(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingApi.getSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザの設定を登録(登録済みの場合は情報を置き換え)する
         * @summary 設定情報登録
         * @param {Setting} [setting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSetting(setting?: Setting, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSetting(setting, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingApi.putSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingApi - factory interface
 * @export
 */
export const SettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingApiFp(configuration)
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザの設定を取得する
         * @summary 設定情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(options?: RawAxiosRequestConfig): AxiosPromise<Setting> {
            return localVarFp.getSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザの設定を登録(登録済みの場合は情報を置き換え)する
         * @summary 設定情報登録
         * @param {Setting} [setting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSetting(setting?: Setting, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putSetting(setting, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingApi - interface
 * @export
 * @interface SettingApi
 */
export interface SettingApiInterface {
    /**
     * アクセストークンを用いて、現在ログイン中のユーザの設定を取得する
     * @summary 設定情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApiInterface
     */
    getSetting(options?: RawAxiosRequestConfig): AxiosPromise<Setting>;

    /**
     * アクセストークンを用いて、現在ログイン中のユーザの設定を登録(登録済みの場合は情報を置き換え)する
     * @summary 設定情報登録
     * @param {Setting} [setting] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApiInterface
     */
    putSetting(setting?: Setting, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * SettingApi - object-oriented interface
 * @export
 * @class SettingApi
 * @extends {BaseAPI}
 */
export class SettingApi extends BaseAPI implements SettingApiInterface {
    /**
     * アクセストークンを用いて、現在ログイン中のユーザの設定を取得する
     * @summary 設定情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public getSetting(options?: RawAxiosRequestConfig) {
        return SettingApiFp(this.configuration).getSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アクセストークンを用いて、現在ログイン中のユーザの設定を登録(登録済みの場合は情報を置き換え)する
     * @summary 設定情報登録
     * @param {Setting} [setting] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public putSetting(setting?: Setting, options?: RawAxiosRequestConfig) {
        return SettingApiFp(this.configuration).putSetting(setting, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
         * @summary ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パスワード情報を更新する
         * @summary パスワード更新
         * @param {Password} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPassword: async (password?: Password, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(password, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
         * @summary ユーザ情報登録
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUser: async (user?: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
         * @summary ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * パスワード情報を更新する
         * @summary パスワード更新
         * @param {Password} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPassword(password?: Password, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPassword(password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.postPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
         * @summary ユーザ情報登録
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUser(user?: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUser(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.putUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
         * @summary ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * パスワード情報を更新する
         * @summary パスワード更新
         * @param {Password} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPassword(password?: Password, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postPassword(password, options).then((request) => request(axios, basePath));
        },
        /**
         * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
         * @summary ユーザ情報登録
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUser(user?: User, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putUser(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
     * @summary ユーザ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUser(options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * パスワード情報を更新する
     * @summary パスワード更新
     * @param {Password} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postPassword(password?: Password, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
     * @summary ユーザ情報登録
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    putUser(user?: User, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を取得する
     * @summary ユーザ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パスワード情報を更新する
     * @summary パスワード更新
     * @param {Password} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postPassword(password?: Password, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).postPassword(password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する
     * @summary ユーザ情報登録
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public putUser(user?: User, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).putUser(user, options).then((request) => request(this.axios, this.basePath));
    }
}



