/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.github.moriakira.jibundashboard.generated.api

import com.github.moriakira.jibundashboard.generated.model.ErrorInfo
import com.github.moriakira.jibundashboard.generated.model.Password
import com.github.moriakira.jibundashboard.generated.model.User
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface UserApi {

    @Operation(
        tags = ["User",],
        summary = "ユーザ情報取得",
        operationId = "getUser",
        description = """アクセストークンを用いて、現在ログイン中のユーザ情報を取得する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常時", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/user"],
            produces = ["application/json"]
    )
    fun getUser(): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "パスワード更新",
        operationId = "postPassword",
        description = """パスワード情報を更新する""",
        responses = [
            ApiResponse(responseCode = "204", description = "正常時"),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/user/password"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun postPassword(@Parameter(description = "") @Valid @RequestBody(required = false) password: Password?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["User",],
        summary = "ユーザ情報登録",
        operationId = "putUser",
        description = """アクセストークンを用いて、現在ログイン中のユーザ情報を登録(登録済みの場合は情報を置き換え)する""",
        responses = [
            ApiResponse(responseCode = "204", description = "正常時"),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/user"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun putUser(@Parameter(description = "") @Valid @RequestBody(required = false) user: User?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
