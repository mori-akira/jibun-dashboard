/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.github.moriakira.jibundashboard.generated.api

import com.github.moriakira.jibundashboard.generated.model.ErrorInfo
import com.github.moriakira.jibundashboard.generated.model.Qualification
import com.github.moriakira.jibundashboard.generated.model.QualificationId
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface QualificationApi {

    @Operation(
        tags = ["Qualification",],
        summary = "資格情報削除(ID)",
        operationId = "deleteQualification",
        description = """IDを指定して資格情報を削除する""",
        responses = [
            ApiResponse(responseCode = "204", description = "正常時"),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/qualification/{qualificationId}"],
            produces = ["application/json"]
    )
    fun deleteQualification(@Parameter(description = "資格ID", required = true) @PathVariable("qualificationId") qualificationId: java.util.UUID): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Qualification",],
        summary = "資格情報取得",
        operationId = "getQualification",
        description = """検索条件を指定して資格情報を取得する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常時", content = [Content(array = ArraySchema(schema = Schema(implementation = Qualification::class)))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/qualification"],
            produces = ["application/json"]
    )
    fun getQualification(@Parameter(description = "資格名") @Valid @RequestParam(value = "qualificationName", required = false) qualificationName: kotlin.String?,@Parameter(description = "ステータス", schema = Schema(allowableValues = ["dream", "planning", "acquired"])) @Valid @RequestParam(value = "status", required = false) status: kotlin.collections.List<kotlin.String>?,@Parameter(description = "ランク", schema = Schema(allowableValues = ["D", "C", "B", "A"])) @Valid @RequestParam(value = "rank", required = false) rank: kotlin.collections.List<kotlin.String>?,@Parameter(description = "発行組織") @Valid @RequestParam(value = "organization", required = false) organization: kotlin.String?,@Parameter(description = "取得年月日From") @Valid @RequestParam(value = "acquiredDateFrom", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) acquiredDateFrom: java.time.LocalDate?,@Parameter(description = "取得年月日To") @Valid @RequestParam(value = "acquiredDateTo", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) acquiredDateTo: java.time.LocalDate?,@Parameter(description = "有効期限From") @Valid @RequestParam(value = "expirationDateFrom", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) expirationDateFrom: java.time.LocalDate?,@Parameter(description = "有効期限To") @Valid @RequestParam(value = "expirationDateTo", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) expirationDateTo: java.time.LocalDate?,@Parameter(description = "ソートキー", schema = Schema(allowableValues = ["qualificationName", "rank", "organization", "acquiredDate", "expirationDate"])) @Valid @RequestParam(value = "sortKey", required = false) sortKey: kotlin.String?): ResponseEntity<List<Qualification>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Qualification",],
        summary = "資格情報取得(ID)",
        operationId = "getQualificationById",
        description = """IDを指定して資格情報を取得する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常時", content = [Content(schema = Schema(implementation = Qualification::class))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/qualification/{qualificationId}"],
            produces = ["application/json"]
    )
    fun getQualificationById(@Parameter(description = "資格ID", required = true) @PathVariable("qualificationId") qualificationId: java.util.UUID): ResponseEntity<Qualification> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Qualification",],
        summary = "資格情報登録",
        operationId = "putQualification",
        description = """資格報を登録(登録済みの場合は情報を置き換え)する""",
        responses = [
            ApiResponse(responseCode = "201", description = "正常時", content = [Content(schema = Schema(implementation = QualificationId::class))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/qualification"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun putQualification(@Parameter(description = "") @Valid @RequestBody(required = false) qualification: Qualification?): ResponseEntity<QualificationId> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
