/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.github.moriakira.jibundashboard.generated.api

import com.github.moriakira.jibundashboard.generated.model.ErrorInfo
import com.github.moriakira.jibundashboard.generated.model.UploadUrl
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface FileApi {

    @Operation(
        tags = ["File",],
        summary = "アップロードURL取得",
        operationId = "getUploadUrl",
        description = """ファイルアップロード用の署名付きURLを発行し、取得する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常系", content = [Content(schema = Schema(implementation = UploadUrl::class))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/file/upload-url"],
            produces = ["application/json"]
    )
    fun getUploadUrl(@Parameter(description = "ファイルID") @Valid @RequestParam(value = "fileId", required = false) fileId: java.util.UUID?): ResponseEntity<UploadUrl> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["File",],
        summary = "ローカル環境用Mock API",
        operationId = "uploadFileMock",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常系", content = [Content(schema = Schema(implementation = kotlin.String::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/file/upload-mock"],
            produces = ["application/pdf"],
            consumes = ["application/pdf"]
    )
    fun uploadFileMock(@Parameter(description = "", required = true) @Valid @RequestBody body: org.springframework.web.multipart.MultipartFile): ResponseEntity<kotlin.String> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
