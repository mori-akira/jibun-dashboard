/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.github.moriakira.jibundashboard.generated.api

import com.github.moriakira.jibundashboard.generated.model.ErrorInfo
import com.github.moriakira.jibundashboard.generated.model.Salary
import com.github.moriakira.jibundashboard.generated.model.SalaryId
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface SalaryApi {

    @Operation(
        tags = ["Salary",],
        summary = "給与情報削除(ID)",
        operationId = "deleteSalary",
        description = """IDを指定して給与情報を削除する""",
        responses = [
            ApiResponse(responseCode = "204", description = "正常時"),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/salary/{salaryId}"],
            produces = ["application/json"]
    )
    fun deleteSalary(@Parameter(description = "給与ID", required = true) @PathVariable("salaryId") salaryId: java.util.UUID): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Salary",],
        summary = "給与情報取得",
        operationId = "getSalary",
        description = """検索条件を指定して給与情報を取得する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常時", content = [Content(array = ArraySchema(schema = Schema(implementation = Salary::class)))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/salary"],
            produces = ["application/json"]
    )
    fun getSalary(@Parameter(description = "対象年月日") @Valid @RequestParam(value = "targetDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) targetDate: java.time.LocalDate?,@Parameter(description = "対象年月日From") @Valid @RequestParam(value = "targetDateFrom", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) targetDateFrom: java.time.LocalDate?,@Parameter(description = "対象年月日To") @Valid @RequestParam(value = "targetDateTo", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) targetDateTo: java.time.LocalDate?): ResponseEntity<List<Salary>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Salary",],
        summary = "給与情報取得(ID)",
        operationId = "getSalaryById",
        description = """IDを指定して給与情報を取得する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常時", content = [Content(schema = Schema(implementation = Salary::class))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/salary/{salaryId}"],
            produces = ["application/json"]
    )
    fun getSalaryById(@Parameter(description = "給与ID", required = true) @PathVariable("salaryId") salaryId: java.util.UUID): ResponseEntity<Salary> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Salary",],
        summary = "給与情報登録OCR実行",
        operationId = "getSalaryOcr",
        description = """給与情報登録のOCR処理を実行する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常時(置き換え)", content = [Content(schema = Schema(implementation = SalaryId::class))]),
            ApiResponse(responseCode = "201", description = "正常時(新規登録)", content = [Content(schema = Schema(implementation = SalaryId::class))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/salary/ocr"],
            produces = ["application/json"]
    )
    fun getSalaryOcr(@NotNull @Parameter(description = "対象年月日", required = true) @Valid @RequestParam(value = "targetDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) targetDate: java.time.LocalDate,@NotNull @Parameter(description = "ファイルID", required = true) @Valid @RequestParam(value = "fileId", required = true) fileId: java.util.UUID): ResponseEntity<SalaryId> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Salary",],
        summary = "給与情報登録",
        operationId = "putSalary",
        description = """給与情報を登録(登録済みの場合は情報を置き換え)する""",
        responses = [
            ApiResponse(responseCode = "200", description = "正常時(置き換え)", content = [Content(schema = Schema(implementation = SalaryId::class))]),
            ApiResponse(responseCode = "201", description = "正常時(新規登録)", content = [Content(schema = Schema(implementation = SalaryId::class))]),
            ApiResponse(responseCode = "400", description = "パラメータ不正", content = [Content(schema = Schema(implementation = ErrorInfo::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/salary"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun putSalary(@Parameter(description = "") @Valid @RequestBody(required = false) salary: Salary?): ResponseEntity<SalaryId> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
