name: Continuous Delivery
on:
  push:
    branches:
      - main
    paths:
      - "infra/**"
      - "openapi/**"
      - "front/**"
      - "back/**"
      - ".github/workflows/cd.yaml"

concurrency:
  group: cd-${{ github.ref }}

jobs:

  infra:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment: dev

    env:
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: gh-oidc-${{ github.run_id }}-${{ github.run_attempt }}
      TF_VAR_region: ${{ vars.REGION }}
      TF_VAR_cognito_callback_url: ${{ vars.COGNITO_CALLBACK_URL }}
      TF_VAR_cognito_logout_url: ${{ vars.COGNITO_LOGOUT_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter Changes
        id: filter_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infra:
              - "infra/**"

      - name: No Changes Notification
        if: steps.filter_changes.outputs.infra != 'true'
        run: echo "No changes. Skipping this job."

      - name: AWS Configure
        if: steps.filter_changes.outputs.infra == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ vars.REGION }}

      - name: Setup Terraform
        if: steps.filter_changes.outputs.infra == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11"

      - name: Terraform Init
        if: steps.filter_changes.outputs.infra == 'true'
        run: terraform init
        working-directory: infra/main

      - name: Terraform Format
        if: steps.filter_changes.outputs.infra == 'true'
        run: terraform fmt -check
        working-directory: infra/main

      - name: Terraform Plan
        if: steps.filter_changes.outputs.infra == 'true'
        run: terraform plan -input=false
        working-directory: infra/main

      - name: Terraform Apply
        if: steps.filter_changes.outputs.infra == 'true'
        run: terraform apply -auto-approve -input=false
        working-directory: infra/main

  front:
    runs-on: ubuntu-latest
    needs: [infra]
    permissions:
      id-token: write
      contents: read
    environment: dev

    env:
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: gh-oidc-${{ github.run_id }}-${{ github.run_attempt }}
      NUXT_PUBLIC_BASE_URL: /
      NUXT_PUBLIC_API_BASE_URL: /
      NUXT_PUBLIC_API_MODE: mock
      NUXT_PUBLIC_REQUIRE_AUTH: on
      NUXT_PUBLIC_REGION: ${{ vars.REGION }}
      NUXT_PUBLIC_COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}
      NUXT_PUBLIC_COGNITO_DOMAIN: ${{ vars.COGNITO_DOMAIN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter Changes
        id: filter_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            front:
              - "front/**"
              - "openapi/**"

      - name: No Changes Notification
        if: steps.filter_changes.outputs.front != 'true'
        run: echo "No changes. Skipping this job."

      - name: Setup Node.js
        if: steps.filter_changes.outputs.front == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        if: steps.filter_changes.outputs.front == 'true'
        working-directory: front
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Generate API Client Module
        if: steps.filter_changes.outputs.front == 'true'
        run: |
          cd openapi
          npx openapi-generator-cli generate
          if ! grep -Fxq 'export type LocaleCode = I18n;' ../front/api/client/api.ts; then
            echo 'export type LocaleCode = I18n;' >> ../front/api/client/api.ts
          fi
          npx openapi-zod-client  openapi.yaml -o ../front/api/client/schemas.ts --export-schemas
          cd ../front
          sed -i '1s;^;/* eslint-disable */\n;' api/client/schemas.ts
          npx --yes prettier@3 --write "api/client/**/*.{ts,tsx,js,json}"

      - name: Run Lint
        if: steps.filter_changes.outputs.front == 'true'
        working-directory: front
        run: npx eslint .

      - name: Run Tests
        if: steps.filter_changes.outputs.front == 'true'
        working-directory: front
        run: npx vitest run

      - name: Generate Static Site
        if: steps.filter_changes.outputs.front == 'true'
        working-directory: front
        env:
          NITRO_PRERENDER_CONCURRENCY: 8
        run: npm run generate

      - name: Configure AWS Credentials
        if: steps.filter_changes.outputs.front == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ vars.REGION }}

      - name: Upload to S3
        if: steps.filter_changes.outputs.front == 'true'
        run: aws s3 sync front/dist s3://${{ vars.FRONT_BUCKET_NAME }} --delete --quiet

  back:
    runs-on: ubuntu-latest
    needs: [infra]
    permissions:
      id-token: write
      contents: read
    environment: dev
    defaults:
      run:
        working-directory: back
    strategy:
      fail-fast: false
      matrix:
        service: [resource]

    env:
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: gh-oidc-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter Changes
        id: filter_changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            back:
              - "back/**"
              - "openapi/**"

      - name: No Changes Notification
        if: steps.filter_changes.outputs.back != 'true'
        run: echo "No changes. Skipping this job."

      - name: Setup JDK
        if: steps.filter_changes.outputs.back == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: 'gradle'

      - name: Make Gradle Wrapper Executable
        if: steps.filter_changes.outputs.back == 'true'
        run: sudo chmod +x gradlew

      - name: Build Lambda Jar
        if: steps.filter_changes.outputs.back == 'true'
        run: |
          ./gradlew \
            :services:${{ matrix.service }}:detekt \
            :services:${{ matrix.service }}:spotlessCheck \
            :services:${{ matrix.service }}:test \
            :services:${{ matrix.service }}:shadowJar \
            --no-daemon

      - name: Configure AWS Credentials
        if: steps.filter_changes.outputs.back == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ vars.REGION }}

      - name: Upload to S3
        if: steps.filter_changes.outputs.back == 'true'
        run: aws s3 cp services/${{ matrix.service }}/build/libs/${{ matrix.service }}.jar s3://${{ vars.ARTIFACTS_BUCKET_NAME }}/${{ matrix.service }}.jar --quiet

      - name: Update Lambda Code
        if: steps.filter_changes.outputs.back == 'true'
        run: |
          aws lambda update-function-code \
            --function-name "${{ vars.APP_NAME }}-resource-${{ vars.ENV_NAME }}" \
            --s3-bucket "${{ vars.ARTIFACTS_BUCKET_NAME }}" \
            --s3-key "${{ matrix.service }}.jar" \
            --publish
